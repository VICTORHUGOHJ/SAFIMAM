	function[z ,zc, p ,K, Dopt] = LP_EQR_POLE_PLACER(Amax, Wc, Amin, wstep, wi, NIN)	%	%	Returns the zeros, poles and gain constant for an equiripple passband,	%	analog lowpass filter.	%	Dopt is the final distance to the specification in dB. If negative 	%	the specification is not met.	%	The routine uses the tranformed variable Z to achieve high numerical 	%	accuracy.	%	Amax = passband attenuation	%	Wc = passband cutoff angular frequency	%	Amin = contains piecewise constant stopband attenuation 	%	wstep = step frequencies in the stopband	%	wi = initial frequencies of the zeros on the imaginary axis	%	NIN = number of zeros at infinity	%	wstep and wi may NOT contain any common values.		% Author: 			Per Lšwenborg, 2003-01-14	% Modified by: 		LW 2005-11-15	% Copyright:		Divison of Electronics Systems	% 					Dept. Electrical Engineering, Linkšping University, Sweden	% Version: 			1	% Known bugs:		None	% Report bugs to:	larsw@isy.liu.se	%	zatt = lp_w2z(wi, Wc);	zstep = lp_w2z(wstep, Wc);		if min(wi)< min(wstep)		disp('Error: Initial attenuation poles are not in stopband.')		break	end	zstep = sort(zstep);	while 1		zatt = sort(zatt);				zarcmin = lp_find_arcmin_epb(zatt, NIN);				[dmin, zout] = lp_find_dmin2(zstep, zatt, zarcmin, Amin, Amax, NIN);				[deltaz, Dopt] = lp_find_new_poles(zatt, NIN, Amax, zout, dmin);				if isempty(deltaz)			break		end		zatt = zatt+deltaz;				for k = 1:length(zatt)			if zatt(k) < = zstep(1)				zatt(k) = zstep(1)+rand(1)*0.01;			elseif zatt(k) >1				zatt(k) = 1-rand(1)*0.01; 			end		end			if max(abs(deltaz))<1e-10			Dopt			break;		else			disp(mean(deltaz))		end	end	ee = lp_get_ee(zatt, NIN, Amax); % ee = f^2 + q^2	[P,Q] = bairstow(ee);		wi = lp_z2w(zatt, Wc);		[p,K] = lp_get_poles(P, Q, Wc, Amax, wi);	z = [j*wi -j*wi];	F = 1;	for k = 1:length(NIN)		F = conv(F,[1 1]); 	end		for k = 1:length(zatt)		F = conv(F,[1 2*zatt(k) zatt(k)^2]); 	end	F = fliplr(F);	for k = 2:2:length(F)		F(k) = 0; 	end	F = fliplr(F);	zfi = roots(F);	zfi = zfi(find(imag(zfi)>0));	wfi = lp_z2w(zfi, Wc);	zc = [0 j*wfi' -j*wfi'];	z = z';	p = p';		disp('Poles:')	disp(p)	disp('Zeros:')	disp(z)